// Code generated by MockGen. DO NOT EDIT.
// Source: stores/stores.go

// Package storesmock is a generated GoMock package.
package storesmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMySQL is a mock of MySQL interface
type MockMySQL struct {
	ctrl     *gomock.Controller
	recorder *MockMySQLMockRecorder
}

// MockMySQLMockRecorder is the mock recorder for MockMySQL
type MockMySQLMockRecorder struct {
	mock *MockMySQL
}

// NewMockMySQL creates a new mock instance
func NewMockMySQL(ctrl *gomock.Controller) *MockMySQL {
	mock := &MockMySQL{ctrl: ctrl}
	mock.recorder = &MockMySQLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMySQL) EXPECT() *MockMySQLMockRecorder {
	return m.recorder
}

// InsertToDB mocks base method
func (m *MockMySQL) InsertToDB(values ...[]interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range values {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertToDB", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertToDB indicates an expected call of InsertToDB
func (mr *MockMySQLMockRecorder) InsertToDB(values ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertToDB", reflect.TypeOf((*MockMySQL)(nil).InsertToDB), values...)
}
