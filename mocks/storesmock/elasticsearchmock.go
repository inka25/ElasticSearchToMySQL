// Code generated by MockGen. DO NOT EDIT.
// Source: stores/stores.go

// Package storesmock is a generated GoMock package.
package storesmock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	elastic "github.com/olivere/elastic/v6"
)

// MockElasticSearch is a mock of ElasticSearch interface
type MockElasticSearch struct {
	ctrl     *gomock.Controller
	recorder *MockElasticSearchMockRecorder
}

// MockElasticSearchMockRecorder is the mock recorder for MockElasticSearch
type MockElasticSearchMockRecorder struct {
	mock *MockElasticSearch
}

// NewMockElasticSearch creates a new mock instance
func NewMockElasticSearch(ctrl *gomock.Controller) *MockElasticSearch {
	mock := &MockElasticSearch{ctrl: ctrl}
	mock.recorder = &MockElasticSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockElasticSearch) EXPECT() *MockElasticSearchMockRecorder {
	return m.recorder
}

// ExecuteES mocks base method
func (m *MockElasticSearch) ExecuteES(start, end, statusCode *string) (*elastic.SearchResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteES", start, end, statusCode)
	ret0, _ := ret[0].(*elastic.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteES indicates an expected call of ExecuteES
func (mr *MockElasticSearchMockRecorder) ExecuteES(start, end, statusCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteES", reflect.TypeOf((*MockElasticSearch)(nil).ExecuteES), start, end, statusCode)
}
